"use strict";

// * Cr√©ation de la fonction pour l'affichage du contenu de mes cat√©gories, pour la prise de rendez-vous

//  La premire cat√©gorie " Beaut√© des Mains" sera directement en mode "active" (visible) par d√©faut,
//  Et les autres cat√©gories seront cach√©es

const categoryButtons = document.querySelectorAll(".category-btn"); // Boutons de cat√©gories

const serviceCategories = document.querySelectorAll(".service-category"); // Sections de cat√©gories de services


// * On execute la fonction pour activer les boutons de cat√©gorie
ActiverLesBoutonsDeCategorie();

// * Fonction pour initialiser les √©v√©nements de clic sur les boutons de cat√©gorie
function ActiverLesBoutonsDeCategorie() {
  // Pour chaque bouton de cat√©gorie, on ajoute un √©couteur d'√©v√©nement pour le clic
  categoryButtons.forEach(function (button) {
    button.addEventListener("click", ClicSurCategorie);
  });
}



// Fonction appel√©e quand on cique sur un bouton de cat√©gorie
function ClicSurCategorie(event) {
  // event = param√®tre quand tu cliques sur un √©l√©ment. JS va cr√©e un objet "event"
  // qui contient plein d'informations sur ce qui vient de se passer (le clic)

  //    ‚ö†Ô∏è Pourquoi currentTarget et pas juste target ?
  // event.target = l‚Äô√©l√©ment r√©ellement cliqu√© (m√™me un span √† l‚Äôint√©rieur d‚Äôun bouton).

  // event.currentTarget = l‚Äô√©l√©ment sur lequel on a mis le .addEventListener().

  // üëâ Dans ton cas, tu veux manipuler le bouton lui-m√™me, pas un √©l√©ment HTML √† l‚Äôint√©rieur du bouton. Donc on utilise currentTarget.

  // On recup√®re le bouton cliqu√© et l'ID de la cat√©gorie associ√©e
  // event.currentTarget = l'√©l√©ment sur lequel l'√©v√©nement a √©t√© d√©clench√© (le bouton cliqu√©)
  const button = event.currentTarget; // R√©cup√®re le bouton cliqu√©
  const categoryId = button.getAttribute("data-category"); // R√©cup√®re l'ID de la cat√©gorie depuis l'attribut data-category
  const serviceCategory = document.getElementById(categoryId); // R√©cup√®re la cat√©gorie de service correspondante √† l'ID

  // * Quand je clique √ßa me fait disparaitre toutes les cat√©gories de services
  // On retire la classe "active" de tous les boutons de cat√©gorie
  removeActiveClassFromAllButtons();
  // On cache toutes les cat√©gories de services
  CacherToutesLesCategoriesServices();

  
  // On ajoute la classe "active" au bouton cliqu√©
  button.classList.add("active");

  // Si la section existe bien, on lui ajoute La classe "active" pour l'afficher
  if (serviceCategory) {
    serviceCategory.classList.add("active");
  }
}




// * Voici la fonction pour r√©tirer la classe "active" de tous les boutons de cat√©gorie
// ? Une fois que l'on clique sur un bouton de cat√©gorie, on retire la classe "active" de tous les boutons

function removeActiveClassFromAllButtons() {
  // Pour chaque bouton de cat√©gorie, je retire la classe "active"
  categoryButtons.forEach(function (button) {
    button.classList.remove("active");
  });
}

// * Ma fonction pour cacher toutes les cat√©gories de services

function CacherToutesLesCategoriesServices() {
  // ? Une fois que l'on clique sur un bouton de cat√©gorie, on cache toutes les cat√©gories de services
  // Pour chaque cat√©gorie de service, je retire la classe "active"
  serviceCategories.forEach(function (ServicesCategory) {
    // Je retire la classe "active" de chaque cat√©gorie de service
    ServicesCategory.classList.remove("active");
  });
}